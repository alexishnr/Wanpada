{"version":3,"sources":["commands/fetch.js"],"names":["program","command","description","asyncActionProjectDir","projectDir","options","getPublishInfoAsync","args","username","remotePackageName","experienceName","remoteFullPackageName","distOutputFile","resolve","pushOutputFile","credentialMetadata","platform","getCredentialsForPlatform","certP12","certPassword","certPrivateSigningKey","pushP12","pushPassword","pushPrivateSigningKey","provisioningProfile","teamId","undefined","writeFileSync","Buffer","from","keyPath","p","bold","Error","outputFile","credentials","keystore","keystorePassword","keyAlias","keystoreAlias","keyPassword","storeBuf"],"mappings":"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","file":"../../commands/fetch.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { Credentials, Exp } from 'xdl';\n\nimport log from '../log';\n\nexport default (program: any) => {\n  program\n    .command('fetch:ios:certs [project-dir]')\n    .description(\n      `Fetch this project's iOS certificates and provisioning profile.\nWrites certificates to PROJECT_DIR/PROJECT_NAME_(dist|push).p12 and prints passwords to stdout.`\n    )\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const {\n        args: { username, remotePackageName, remoteFullPackageName: experienceName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      let distOutputFile = path.resolve(projectDir, `${remotePackageName}_dist.p12`);\n      let pushOutputFile = path.resolve(projectDir, `${remotePackageName}_push.p12`);\n\n      const credentialMetadata = { username, experienceName, platform: 'ios' };\n\n      log(`Retreiving iOS credentials for ${experienceName}`);\n\n      try {\n        const {\n          certP12,\n          certPassword,\n          certPrivateSigningKey,\n          pushP12,\n          pushPassword,\n          pushPrivateSigningKey,\n          provisioningProfile,\n          teamId,\n        } = await Credentials.getCredentialsForPlatform(credentialMetadata);\n        // if undefines because some people might have pre-local-auth as default credentials.\n        if (teamId !== undefined) {\n          log(`These credentials are associated with Apple Team ID: ${teamId}`);\n        }\n        log(`Writing distribution cert to ${distOutputFile}...`);\n        fs.writeFileSync(distOutputFile, Buffer.from(certP12, 'base64'));\n        if (certPrivateSigningKey !== undefined) {\n          let keyPath = path.resolve(projectDir, `${remotePackageName}_dist_cert_private.key`);\n          fs.writeFileSync(keyPath, certPrivateSigningKey);\n        }\n        log('Done writing distribution cert credentials to disk.');\n        log(`Writing push cert to ${pushOutputFile}...`);\n        fs.writeFileSync(pushOutputFile, Buffer.from(pushP12, 'base64'));\n        if (pushPrivateSigningKey !== undefined) {\n          let keyPath = path.resolve(projectDir, `${remotePackageName}_push_cert_private.key`);\n          fs.writeFileSync(keyPath, pushPrivateSigningKey);\n        }\n        log('Done writing push cert credentials to disk.');\n        if (provisioningProfile !== undefined) {\n          let p = path.resolve(projectDir, `${remotePackageName}.mobileprovision`);\n          log(`Writing provisioning profile to ${p}...`);\n          fs.writeFileSync(p, Buffer.from(provisioningProfile, 'base64'));\n          log('Done writing provisioning profile to disk');\n        }\n        log(`Save these important values as well:\n\nDistribution p12 password: ${chalk.bold(certPassword)}\nPush p12 password:         ${chalk.bold(pushPassword)}\n`);\n      } catch (e) {\n        throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n      }\n\n      log('All done!');\n    }, true);\n\n  program\n    .command('fetch:android:keystore [project-dir]')\n    .description(\n      \"Fetch this project's Android keystore. Writes keystore to PROJECT_DIR/PROJECT_NAME.jks and prints passwords to stdout.\"\n    )\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const {\n        args: { username, remotePackageName, remoteFullPackageName: experienceName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      let outputFile = path.resolve(projectDir, `${remotePackageName}.jks`);\n\n      const credentialMetadata = { username, experienceName, platform: 'android' };\n\n      log(`Retreiving Android keystore for ${experienceName}`);\n\n      const credentials: ?AndroidCredentials = await Credentials.getCredentialsForPlatform(\n        credentialMetadata\n      );\n\n      if (!credentials) {\n        throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n      }\n\n      const { keystore, keystorePassword, keystoreAlias: keyAlias, keyPassword } = credentials;\n\n      const storeBuf = Buffer.from(keystore, 'base64');\n\n      log(`Writing keystore to ${outputFile}...`);\n      fs.writeFileSync(outputFile, storeBuf);\n      log('Done writing keystore to disk.');\n\n      log(`Save these important values as well:\n\nKeystore password: ${chalk.bold(keystorePassword)}\nKey alias:         ${chalk.bold(keyAlias)}\nKey password:      ${chalk.bold(keyPassword)}\n`);\n\n      log('All done!');\n    }, true);\n};\n"],"sourceRoot":"/Users/ville/Projects/expo/universe/dev/exp/src"}