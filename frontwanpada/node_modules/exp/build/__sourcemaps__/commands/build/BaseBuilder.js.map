{"version":3,"sources":["commands/build/BaseBuilder.js"],"names":["sleep","ms","setTimeout","res","secondsToMilliseconds","seconds","BaseBuilder","projectDir","options","wait","clearCredentials","releaseChannel","publish","_checkProjectConfig","run","error","message","process","exit","readConfigJsonAsync","exp","isDetached","current","buildAsync","mode","buildStatus","err","Error","jobs","length","raw","forEach","platform","j","status","id","artifacts","url","ids","getLatestReleaseAsync","release","channel","publicationId","publishedTime","buildId","timeout","interval","time","Date","getTime","endTime","job","compose","head","filter","getOr","expIds","opts","type","underline","constructBuildLogsUrl","start","completedJob","stop","green","env","EXPO_STAGING","EXPO_LOCAL"],"mappings":"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","file":"../../../commands/build/BaseBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport { Project, ProjectUtils } from 'xdl';\nimport chalk from 'chalk';\nimport fp from 'lodash/fp';\nimport simpleSpinner from '@expo/simple-spinner';\n\nimport log from '../../log';\nimport { action as publishAction } from '../publish';\nimport BuildError from './BuildError';\n\nconst sleep = (ms) => new Promise(res => setTimeout(res, ms));\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\n\ntype BuilderOptions = {\n  wait: boolean,\n  clearCredentials: boolean,\n  type?: string,\n  releaseChannel: string,\n  publish: boolean,\n};\n\nexport default class BaseBuilder {\n  projectDir: string = '';\n  options: BuilderOptions = {\n    wait: true,\n    clearCredentials: false,\n    releaseChannel: 'default',\n    publish: false,\n  };\n  run: () => Promise<void>;\n\n  constructor(projectDir: string, options: BuilderOptions) {\n    this.projectDir = projectDir;\n    this.options = options;\n  }\n\n  async command() {\n    try {\n      await this._checkProjectConfig();\n      await this.run();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async _checkProjectConfig(): Promise<void> {\n    let { exp } = await ProjectUtils.readConfigJsonAsync(this.projectDir);\n    if (exp.isDetached) {\n      log.error(`\\`exp build\\` is not supported for detached projects.`);\n      process.exit(1);\n    }\n  }\n\n  async checkStatus(current: boolean = true): Promise<void> {\n    await this._checkProjectConfig();\n\n    log('Checking if current build exists...\\n');\n\n    const buildStatus = await Project.buildAsync(this.projectDir, {\n      mode: 'status',\n      current,\n    });\n\n    if (buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (buildStatus.jobs && buildStatus.jobs.length) {\n      log.raw();\n      log('============');\n      log('Build Status');\n      log('============\\n');\n      buildStatus.jobs.forEach(j => {\n        let platform;\n        if (j.platform === 'ios') {\n          platform = 'iOS';\n        } else {\n          platform = 'Android';\n        }\n\n        let status;\n        switch (j.status) {\n          case 'pending':\n            status = 'Build waiting in queue...';\n            break;\n          case 'started':\n            status = 'Build started...';\n            break;\n          case 'in-progress':\n            status = 'Build in progress...';\n            break;\n          case 'finished':\n            status = 'Build finished.';\n            break;\n          case 'errored':\n            status = 'There was an error with this build.';\n            if (buildStatus.id) {\n              status += `\n\nWhen requesting support, please provide this build ID:\n\n${buildStatus.id}\n`;\n            }\n            break;\n          default:\n            status = '';\n            break;\n        }\n\n        if (j.status !== 'finished') {\n          log(`${platform}: ${status}`);\n        } else {\n          log(`${platform}:`);\n          switch (j.platform) {\n            case 'ios':\n              if (!j.artifacts) {\n                log(`Problem getting IPA URL. Please try build again.`);\n                break;\n              }\n              log(`IPA: ${j.artifacts.url}\\n`);\n              break;\n            case 'android':\n              if (!j.artifacts) {\n                log(`Problem getting APK URL. Please try build again.`);\n                break;\n              }\n              log(`APK: ${j.artifacts.url}\\n`);\n              break;\n          }\n        }\n      });\n\n      throw new BuildError('Cannot start new build, as there is a build in progress.');\n    }\n\n    log('No currently active or previous builds for this project.');\n  }\n\n  async ensureReleaseExists(platform: string) {\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        ...this.options,\n        platform,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      log('Looking for releases...');\n      const release = await Project.getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel,\n        platform,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `exp publish` first.');\n      }\n      log(\n        `Using existing release on channel \"${release.channel}\":\\n  publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async wait(buildId, { timeout = 1200, interval = 60 } = {}) {\n    let time = new Date().getTime();\n    log(`Waiting for build to complete. You can press Ctrl+C to exit.`);\n    await sleep(secondsToMilliseconds(interval));\n    const endTime = time + secondsToMilliseconds(timeout);\n    while (time <= endTime) {\n      const res = await Project.buildAsync(this.projectDir, { current: false, mode: 'status' });\n      const job = fp.compose(\n        fp.head,\n        fp.filter(job => buildId && job.id === buildId),\n        fp.getOr([], 'jobs')\n      )(res);\n      switch (job.status) {\n      case 'finished':\n        return job;\n      case 'pending':\n      case 'started':\n      case 'in-progress':\n        break;\n      case 'errored':\n        throw new BuildError(`Standalone build failed!`);\n      default:\n        throw new BuildError(`Unknown status: ${job.status} - aborting!`);\n      }\n      time = new Date().getTime();\n      await sleep(secondsToMilliseconds(interval));\n    }\n    throw new BuildError('Timeout reached! Project is taking longer than expected to finish building, aborting wait...');\n    return false;\n  }\n\n  async build(expIds: Array<string>, platform: string) {\n    log('Building...');\n\n    let opts = {\n      mode: 'create',\n      expIds,\n      platform,\n      releaseChannel: this.options.releaseChannel,\n    };\n\n    if (platform === 'ios') {\n      opts = {\n        ...opts,\n        type: this.options.type,\n      };\n    }\n\n    // call out to build api here with url\n    const { id: buildId } = await Project.buildAsync(this.projectDir, opts);\n\n    log('Build started, it may take a few minutes to complete.');\n\n    if (buildId) {\n      log(\n        `You can monitor the build at\\n\\n ${chalk.underline(\n          constructBuildLogsUrl(buildId)\n        )}\\n`\n      );\n    }\n\n    if (this.options.wait) {\n      simpleSpinner.start();\n      const completedJob = await this.wait(buildId);\n      simpleSpinner.stop();\n      log(`${chalk.green('Successfully built standalone app:')} ${chalk.underline(completedJob.artifacts.url)}`);\n    } else {\n      log('Alternatively, run `exp build:status` to monitor it from the command line.');\n    }\n  }\n}\n\nfunction constructBuildLogsUrl(buildId: string): string {\n  if (process.env.EXPO_STAGING) {\n    return `https://staging.expo.io/builds/${buildId}`;\n  } else if (process.env.EXPO_LOCAL) {\n    return `http://expo.test/builds/${buildId}`;\n  } else {\n    return `https://expo.io/builds/${buildId}`;\n  }\n}\n"],"sourceRoot":"/Users/ville/Projects/expo/universe/dev/exp/src"}