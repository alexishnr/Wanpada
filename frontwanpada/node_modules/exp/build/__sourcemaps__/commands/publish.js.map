{"version":3,"sources":["commands/publish.js"],"names":["projectDir","options","channelRe","RegExp","releaseChannel","test","error","process","exit","currentStatus","status","startedOurOwn","parent","name","startOpts","reset","clear","nonPersistent","maxWorkers","startAsync","quiet","getRecipient","sendTo","recipient","start","publishAsync","result","url","stop","underline","raw","sendUrlAsync","stopAsync","action","program","command","alias","description","option","asyncActionProjectDir"],"mappings":"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","file":"../../commands/publish.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport simpleSpinner from '@expo/simple-spinner';\n\nimport { Project } from 'xdl';\n\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\n\ntype Options = {\n  clear?: boolean,\n  sendTo?: string,\n  quiet?: boolean,\n  releaseChannel?: string,\n};\n\nexport async function action(projectDir: string, options: Options = {}) {\n  let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n  if (options.releaseChannel && !channelRe.test(options.releaseChannel)) {\n    log.error(\n      'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n    );\n    process.exit(1);\n  }\n  const status = await Project.currentStatus(projectDir);\n\n  let startedOurOwn = false;\n  if (status !== 'running') {\n    log(`Unable to find an existing ${options.parent.name} instance for this directory, starting a new one...`);\n    installExitHooks(projectDir);\n\n    const startOpts = { reset: options.clear, nonPersistent: true };\n    if (options.maxWorkers) {\n      startOpts.maxWorkers = options.maxWorkers;\n    }\n\n    await Project.startAsync(\n      projectDir,\n      startOpts,\n      !options.quiet,\n    );\n    startedOurOwn = true;\n  }\n\n  let recipient = await sendTo.getRecipient(options.sendTo);\n  log(`Publishing to channel '${options.releaseChannel}'...`);\n\n  if (options.quiet) {\n    simpleSpinner.start();\n  }\n\n  let result = await Project.publishAsync(projectDir, {\n    releaseChannel: options.releaseChannel,\n  });\n\n  let url = result.url;\n\n  // Append the query param for the release channel to the URL.\n  // When we integrate release channels into XDE, we can revisit this and\n  // perhaps push the logic for this into xdl\n  if (options.releaseChannel && options.releaseChannel !== 'default') {\n    url = `${url}?release-channel=${options.releaseChannel}`;\n  }\n\n  if (options.quiet) {\n    simpleSpinner.stop();\n  }\n\n  log('Published');\n  log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n  log.raw(url);\n\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  if (startedOurOwn) {\n    await Project.stopAsync(projectDir);\n  }\n\n  return result;\n}\n\nexport default (program: any) => {\n  program\n    .command('publish [project-dir]')\n    .alias('p')\n    .description('Publishes your project to exp.host')\n    .option('-q, --quiet', 'Suppress verbose output from the React Native packager.')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option(\n      '--release-channel <release channel>',\n      \"The release channel to publish to. Default is 'default'.\",\n      'default'\n    )\n    .asyncActionProjectDir(action, true);\n};\n"],"sourceRoot":"/Users/ville/Projects/expo/universe/dev/exp/src"}