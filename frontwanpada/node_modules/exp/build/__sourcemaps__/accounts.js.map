{"version":3,"sources":["accounts.js"],"names":["getCurrentUserAsync","console","log","yellow","questions","type","name","message","choices","value","action","_onboardUser","green","login","loginOrRegisterIfLoggedOut","options","user","nonInteractive","question","username","_usernamePasswordAuth","password","register","push","validate","val","trim","answers","data","loginAsync","userMetadata","onboarded","Error","usernamePass","legacyMigration","kind","currentConnection","default","givenName","familyName","nickname","email","needsPasswordMigration","shouldUpdateUsernamePassword","legacy","registerAsync","registeredUser","initialize"],"mappings":"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","file":"../accounts.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\n\nimport { User as UserManager } from 'xdl';\nimport CommandError from './CommandError';\nimport prompt from './prompt';\n\nimport type { LoginType, User, UserOrLegacyUser } from 'xdl/build/User';\n\n// const EXP_CLIENT_ID = 'Zso9S1J7xpRYzT4QNlanGYLL5aBrqy1l';\nUserManager.initialize();\n\ntype CommandOptions = {\n  username?: string,\n  password?: string,\n};\n\nexport async function loginOrRegisterIfLoggedOut() {\n  if (await UserManager.getCurrentUserAsync()) {\n    return;\n  }\n\n  console.log(chalk.yellow('\\nAn Expo user account is required to proceed.\\n'));\n\n  const questions = [\n    {\n      type: 'list',\n      name: 'action',\n      message: 'How would you like to authenticate?',\n      choices: [\n        {\n          name: 'Make a new Expo account',\n          value: 'register',\n        },\n        {\n          name: 'Log in with an existing Expo account',\n          value: 'existingUser',\n        },\n        {\n          name: 'Cancel',\n          value: 'cancel',\n        },\n      ],\n    },\n  ];\n\n  const { action } = await prompt(questions);\n\n  if (action === 'register') {\n    await _onboardUser();\n    console.log(chalk.green('Thanks!\\n'));\n  } else if (action === 'existingUser') {\n    await login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function login(options: CommandOptions) {\n  const user = await UserManager.getCurrentUserAsync();\n  if (!options.nonInteractive) {\n    if (user) {\n      const question = [\n        {\n          type: 'confirm',\n          name: 'action',\n          message: `You are already logged in as ${chalk.green(\n            user.username\n          )}. Log in as new user?`,\n        },\n      ];\n\n      const { action } = await prompt(question);\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      'Username and password not provided in non-interactive mode.'\n    );\n  }\n}\n\nexport async function register(options: CommandOptions) {\n  await _onboardUser();\n  console.log('\\nThanks for signing up!');\n}\n\nasync function _usernamePasswordAuth(username?: string, password?: string): Promise<User> {\n  const questions = [];\n  if (!username) {\n    questions.push({\n      type: 'input',\n      name: 'username',\n      message: 'Username/Email Address:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  const answers = await prompt(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n  };\n\n  let user = await UserManager.loginAsync('user-pass', data);\n\n  if (user) {\n    if (user.userMetadata.onboarded) {\n      console.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n      return user;\n    } else {\n      user = await _onboardUser(user, data);\n      console.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n      return user;\n    }\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nasync function _onboardUser(\n  user?: UserOrLegacyUser,\n  usernamePass?: { username: string, password: string }\n): Promise<User> {\n  console.log('');\n\n  const legacyMigration =\n    (user && user.kind === 'legacyUser') ||\n    (user && user.kind === 'user' && user.currentConnection === 'Username-Password-Authentication');\n\n  if (user && legacyMigration) {\n    console.log(\n      `Signed in as: @${chalk.green(user.username)}\nHi there! We don't currently have any way to identify you if you were to lose\nyour password. Please provide us with your name and e-mail address.`\n    );\n  } else {\n    console.log(\n      `Thanks for signing up for Expo!\nJust a few questions:`\n    );\n  }\n\n  console.log('');\n\n  const questions = [];\n  questions.push(\n    {\n      type: 'input',\n      name: 'givenName',\n      message: 'First Name:',\n      default: (!legacyMigration && user && user.kind === 'user' && user.givenName) || null,\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'input',\n      name: 'familyName',\n      message: 'Last Name:',\n      default: (!legacyMigration && user && user.kind === 'user' && user.familyName) || null,\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    }\n  );\n\n  if (!legacyMigration) {\n    // needs a username\n    questions.push({\n      type: 'input',\n      name: 'username',\n      message: 'Username:',\n      default: (user && user.kind === 'user' && (user.username || user.nickname)) || null,\n      validate(val, answers) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  questions.push({\n    type: 'input',\n    name: 'email',\n    message: 'Email Address:',\n    default: (!legacyMigration && user && user.kind === 'user' && user.email) || null,\n    validate(val) {\n      if (val.trim() === '') {\n        return false;\n      }\n      return true;\n    },\n  });\n\n  if (!legacyMigration || (user && user.userMetadata.needsPasswordMigration)) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  if (!legacyMigration) {\n    questions.push({\n      type: 'password',\n      name: 'passwordRepeat',\n      message: 'Password Repeat:',\n      validate(val, answers) {\n        if (val.trim() === '') {\n          return false;\n        }\n        if (val.trim() !== answers.password.trim()) {\n          return `Passwords don't match!`;\n        }\n        return true;\n      },\n    });\n  }\n\n  const answers = await prompt(questions);\n\n  // Don't send user data (username/password) if\n  const shouldUpdateUsernamePassword = !(user && user.kind === 'user' && user.userMetadata.legacy);\n\n  const registeredUser = await UserManager.registerAsync(\n    {\n      ...(shouldUpdateUsernamePassword && usernamePass ? usernamePass : {}),\n      ...answers,\n    },\n    user\n  );\n\n  return registeredUser;\n}\n"],"sourceRoot":"/Users/ville/Projects/expo/universe/dev/exp/src"}